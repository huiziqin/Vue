安排：
    3天：vue基本语法和概念    打包工具    webpack   gulp
    3天： 以项目驱动

什么是vue.js?      https://cdn.staticfile.org/vue/2.5.17-beta.0/vue.js
    目前最火的前端框架，React是最流行的前端框架（网站/手机app都用到）
    vue.js是前端的主流框架之一    和Angular.js React.js  一起  并成为前端三大主流框架
    vue.js是一套构建用户界面的框架，只关注视图层  




    第一天：基本语法
    第二天：品牌管理案例

    jsonp的实现原理：
    1.由于浏览器安全限制，不允许ajax发起跨域（协议，域名，端口 不同的数据接口）请求
    2.可以通过动态创建script标签的形式，把script标签的src属性，指向数据接口的地址，因为script标签不存在跨域限制，这种数据获取方式称为jsonp
    （根据jsonp实现原理，知晓，jsonp只支持get请求）
    具体实现过程：
    1.现在客户端定义一个回调方法，预定义对数据的操作
    2.把这个回调方法的名称。通过URL传参的形式，提交到服务器的数据接口
    3.服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给和客户端去解析执行
    4.客户端拿到服务器返回的字符串之后，当做script脚本去解析执行，这样就拿到了jsonp的数据


https://cdn.staticfile.org/vue-router/3.0.1/vue-router.js


api地址：http://www.liulongbin.top:3005/api/getprodlist


第三天：vue组件
什么是组件：组件的出现，就是为了拆分vue实例的代码量，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，调用相应的组件即可
组件化和模块化的不同：
-模块化：是从代码逻辑的角度进行划分的
-组件化：是从UI界面的角度进行划分的，方便Ui组件的重用

全局组件定义的三种方式



第四天：父子组件间传值
        路由

什么是路由？
后端路由：URL对应服务器上对应的资源
前端路由：对于单页面应用程序来说，主要通过URL中的hash（#号）来实现不同页面之间的切换，同时，hash有一个特点：http请求中不会包含hash相关的内容，所以，单页程序中的页面跳转注意用hash实现
在单页面应用程序中，这种通过hash改变来切换页面的方式，称为前端路由


watch  computed  methods 之间的对比：
1、computed 属性的结果会被缓存 除非依赖的响应式属性变化才会重新计算  主要当作属性来使用
2、methods 方法表示一个具体的操作 主要书写业务逻辑
3、watch 一个对象 键是需要观察的表达式，值是对应回调函数，主要用来监听某些特定数据的变化，从而进行某些具体业务逻辑操作，可以看作computed和methods的结合体

nrm的安装使用：
    作用：提供一些常用的NPM包镜像地址
    1.运行npm i nrm -g  全局安装nrm包
    2.使用nrm ls 查看当前所有可用的镜像源地址 以及当前所使用的镜像源地址
    3.使用nrm use npm 或 nrm use taobao 切换不同的镜像源地址
nrm 只是提供了几个常用的下载包的URL地址 并且能够很容易的切换地址
    但是 我们每次装包的时候 使用的装包工具 都是 npm


webpack概念引入：
网页中会引用哪些常见静态资源？
js
css
images
fonts
模板文件
    .vue [这是在webpack中定义组件的方式 推荐这么用]
网页中引入的静态资源多了以后有什么问题？
1.网页加载速度慢 因为 要发起过多的二次请求
2.要处理错综复杂的依赖关系
如何处理？
1.合并  压缩  精灵图  图片的base64编码
2.可以使用webpack解决各个包之间的依赖关系
什么是webpack?
前端的构建工具  基于node.js开发的前端工具

如何完美解决上述的2种解决方案？
1.使用gulp 基于task任务的
2.使用webpack 基于整个项目
    借助webpack前端自动化构建工具 可以完美实现资源合并 打包 压缩 混淆等功能

webpack 安装的两种方式：
1.npm i webpack -g 全局安装 npm install -g webpack@3.6.0
2.项目根目录运行 npm i webpack --save-sev 安装到项目依赖中


webpack可以做什么事情？
1、能够处理js文件的相互依赖关系
2、能够处理js的兼容问题，把高级的 浏览器不识别的语法 转为可以识别的低级语法


webpack 要打包的文件路径  输出路径


使用webpack-dev-server 这个工具  实现自动打包编译功能
1. 运行  npm i webpack-dev-server@2.9.1 -D 把这个工具安装到项目的本地开发依赖
2. 这个工具用法  和webpack命令的用法 完全一样
3.由于是在项目中本地安装的 所以无法把它当作脚本命令在终端中直接运行（只有安装全局-g的工具 才能在终端正常执行）
4.webpack-dev-server 想要正常运行 需要在本地项目中安装 webpack
5.webpack-dev-server 帮我们打包生成的bundle.js并没有存放到实际的磁盘中(在内存)，所以在在项目根目录找不到打包好的bundle.js

使用html-webpack-plugin插件配置启动页面
1.npm i html-webpack-plugin --save-dev  安装到开发依赖
2.修改webpack.config.js配置文件
3.修改package.json 中 script 节点中的dev指令："dev":"webpack-dev-server"
4.将index.html 中的script标签注释掉  因为html-webpack-plugin会自动把bundle.js添加到index页面